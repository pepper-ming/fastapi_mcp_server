[tool.poetry]
name = "fastapi-mcp-server"
version = "0.1.0"
description = "統計分析與機器學習推論的 MCP Server"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
fastapi = {version = "0.115.0", extras = ["standard"]}
fastapi-mcp = "0.3.0"
uvicorn = {version = "0.24.0", extras = ["standard"]}
pydantic = "2.11.0"
pydantic-settings = "2.5.2"
sqlalchemy = "2.0.23"
asyncpg = "0.29.0"
redis = "5.0.1"
numpy = "^1.26.0"
pandas = "^2.3.2"
scikit-learn = "^1.7.1"
scipy = "^1.11.0"

[tool.poetry.group.dev.dependencies]
pytest = "7.4.0"
pytest-asyncio = "0.21.0"
pytest-cov = "4.1.0"
ruff = "0.1.15"
mypy = "1.8.0"
pre-commit = "3.6.0"
httpx = "0.27.0"

[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "F", "I", "N", "W", "UP"]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["app"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
